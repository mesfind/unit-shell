{
  "hash": "6ed1f542a57e0d5eb3ffe95753690102",
  "result": {
    "markdown": "#  Files and Directories\n\nLet's create a new directory called thesis using the command `mkdir QE` (which has no output):\n\n::: {.cell execution_count=1}\n``` {.python .cell-code}\nmkdir qe\n```\n:::\n\n\nAs you might guess from its name, `mkdir` means \"make directory\". Since `qe` is a relative path (i.e., doesn't have a leading slash), the new directory is created in the current working directory:\n\nSince we've just created the `qe` directory, there's nothing in it yet:\n\n::: {.cell execution_count=2}\n``` {.python .cell-code}\nls -F qe\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nls: qe: No such file or directory\r\n```\n:::\n:::\n\n\n## Moving Files Around\n\nWe can move our new file into the new directory with the move command, mv. The syntax of mv is $ mv file_being_moved location_moving_to. Moving our new file “QE” to our new directory “qe” can be done as follows:\n\n::: {.cell execution_count=3}\n``` {.python .cell-code}\nmv qe QE\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nmv: rename qe to QE: No such file or directory\r\n```\n:::\n:::\n\n\n::: {.cell execution_count=4}\n``` {.python .cell-code}\n$ cd QE\n```\n:::\n\n\nLet's change our working directory to `QE` using `cd`, then run a text editor called `vi` to create a file called `si.in` :\n\n::: {.cell execution_count=5}\n``` {.python .cell-code}\n$ vi si.in\n```\n:::\n\n\n### Which Editor?\n\nText editors can be used for writing code, editing text files such as configuration files, creating user instruction files, and many more. In Linux, text editors are of two kinds that is the graphical user interface (GUI) and command-line text editors (console or terminal).\n\n### **Vi/Vim Editor**\n\n[Vim](https://www.tecmint.com/install-vim-in-linux/ \"How to Install Latest Vim Editor in Linux Systems\") is a powerful command-line based text editor that has enhanced the functionalities of the old Unix [Vi text editor](https://www.tecmint.com/vi-editor-usage/ \"How to Install and Use vi/vim as a Full Text Editor – Part 2\"). It is one the most popular and widely used text editors among System Administrators and programmers that is why many users often refer to it as a programmer's editor.\n\n::: callout-tip\n## Vi/Vim Save and Quit command\n\nThe procedure to save a file in vi/vim and quit the editor is as follows:\n\n1.  open the file with `vi filename( e.g vi si.in)`\n2.  to save a file and quit press `Esc` key , type `` :wq ( or `:x`) ``\n3.  hit `Enter` key\n:::\n\n### Creating Files in Different way\n\nWe have seen how to create text files using the `vi/vim` editor. Now, try the following command in your home directory:\n\n::: {.cell execution_count=6}\n``` {.python .cell-code}\ntouch QE/si.out\n```\n:::\n\n\n## Copying Files\n\nWe can also copy files, leaving the original file while a second version is created either elsewhere or in the same location. The copy command is cp and its syntax is the same as for mv: $ cp file_being_copied location_copying_to. We can create a copy of “QE” into “qe” directory as follows:\n\n::: {.cell execution_count=7}\n``` {.python .cell-code}\ncp QE qe \n```\n\n::: {.cell-output .cell-output-stdout}\n```\ncp: QE: No such file or directory\r\n```\n:::\n:::\n\n\n## Removing Files and Directories\n\nIf we try to remove the entire thesis directory using `rm QE`, we get an error message:\n\n::: {.cell execution_count=8}\n``` {.python .cell-code}\nrm QE\n```\n:::\n\n\n::: callout-warning\n## Using rm Safely\n\nWhat happens when we execute `rm -i QE/si.out`? Why would we want this protection when using `rm`?\n:::\n\n::: {.callout-tip collapse=\"true\"}\n## Solution\n\n`rm: remove regular file 'QE/si.out'?`\n\nThe -i flag will prompt before every removal. The Unix shell doesn't have a trash bin, so all the files removed will disappear forever. By using the -i flag, we have the chance to check that we are deleting only the files that we want to remove.\n:::\n\n::: callout-note\n## With Great Power Comes Great Responsibility\n\nRemoving the files in a directory recursively can be a very dangerous operation. If we're concerned about what we might be deleting we can add the \"interactive\" flag `-i` to `rm` which will ask us for confirmation before each step\n\n::: {.cell execution_count=9}\n``` {.python .cell-code}\n$ rm -r -i QE\n  rm: descend into directory ‘QE’? y\n  rm: remove regular file ‘QE/si.in’? y\n  rm: remove regular file ‘QE/si.out’? y\n  rm: remove directory ‘QE’? y\n```\n:::\n\n\n:::\n\n::: callout-tip\n## Key Points\n\n-   `cp old new` copies a file.\n\n-   `mkdir path` creates a new directory.\n\n-   `mv old new` moves (renames) a file or directory.\n\n-   `rm path` removes (deletes) a file.\n\n-   `*` matches zero or more characters in a filename, so `*.txt` matches all files ending in `.txt`.\n\n-   `?` matches any single character in a filename, so `?.txt` matches `a.txt` but not `any.txt`.\n\n-   Use of the Control key may be described in many ways, including `Ctrl-X`, `Control-X`, and `^X`.\n\n-   The shell does not have a trash bin: once something is deleted, it\\'s really gone.\n\n-   Depending on the type of work you do, you may need a more powerful text editor than `vi`.\n:::\n\n",
    "supporting": [
      "files_directories_files/figure-html"
    ],
    "filters": [],
    "includes": {}
  }
}