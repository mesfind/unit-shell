{
  "hash": "04d9f141e2cd412c8dbf31b8a1d012e9",
  "result": {
    "markdown": "# HPC\n\nThe benefits of using HPC systems for research often far outweigh the cost of learning to use a Shell and include:\n\n* **Speed.** With many more CPU cores, often with higher performance specs, than the computers most people have access to HPC systems can offer significant speed up.\n* **Volume.** Many HPC systems have both the processing memory (RAM) and disk storage to handle very large amounts of data.\n* **Efficiency.** Many HPC systems operate a pool of resources that are drawn on by a many users.\n* **Cost.** Bulk purchasing and government funding mean that the cost to the research community for using these systems in significantly less that it would be otherwise.\n* **Keep personal resources free.** By using an HPC system when required your own personal computer can be used for other things to which it is better suited, like email and spreadsheets.\n\n\n## Why use a HPC cluster?\n\n* High Performance Computing (HPC) typically involves connecting to very large computing systems elsewhere in the world.\n* These other systems can be used to do work that would either be impossible or much slower on smaller systems.\n* HPC resources are shared by multiple users.\n* The standard method of interacting with such systems is via a command line interface.\n\n\n## Connecting to a remote HPC system\n\nMaking a link from our laptop to the cluster is the first step in using a cluster. We have grown accustomed to expecting a visual display with icons, widgets, and possibly some windows or apps when using a computer while seated (or standing, holding it in our hands, or wearing it on our wrists). This visual display is known as a graphical user interface, or GUI. It is more practical to use a command-line interface, or CLI, to convey commands as plain-text because computer clusters are remote resources that we connect to across sluggish or intermittent interfaces (WiFi and VPNs especially). A command's output is also shown as plain text if it returns any. The instructions we execute today won't launch a window to display graphic outcomes.\n\nA CLI can be observed if you've ever launched the Windows Command Prompt or the macOS Terminal. You have used the CLI extensively on your local machine if you have previously attended The Carpentries' courses on the UNIX Shell or Version Control. The sole necessary step in this case is to launch a CLI on a distant machine while taking security precautions to prevent other network users from seeing (or altering) the commands you're executing or the output the remote machine returns. You can send and receive text and data without worrying about prying eyes by opening an encrypted network connection between two machines using the Secure SHell protocol (also known as SSH).\n\n![](img/connect-to-remote.svg)\n\nSSH clients are often command-line programs where the only argument needed is the address of the remote machine. You must also enter your username if it is different from your local login on the distant system. You should set these arguments before selecting \"connect\" if your SSH client includes a graphical user interface, such PuTTY or MobaXterm. In the terminal, type something like ssh userName@hostname, where \"@\" separates the user's ID from the hostname of the remote system. This argument works just like an email address.\n\nA username, password, or pattern must typically be entered when logging into a laptop, tablet, or other personal device to prevent unwanted access. Since logging your keystrokes needs a malicious exploit or physical access in certain circumstances, the risk of someone else intercepting your password is negligible. Anyone on the network is able to log in, or attempt to log in, to systems like gra-login1 that operate an SSH server. Your password is frequently the weakest link in the security chain because usernames are frequently made public or are simple to guess. As a result, a lot of clusters disallow password-based login and demand that you create and configure a public-private key pair with a strong password.\n\n\n\n## Accessing Software on HPC Systems\n\n* HPC systems often provide a lot of different software packages\n* HPC provides ways of selecting and configuring them to get the environment you need.\n* It has multiple versions of commonly used software packages installed called **Environmental Modules**\n\n\n\n\n## Cloud vs Cluster\n\n* High Performance Computing  is not the same as cloud computing.\n* HPC targets extremely large sets of data and crunching the information in parallel while sharing the data between compute nodes\n* In HPC one application can be run across a variable number of nodes. We call this **vertical scalability**.\n* Cloud computing on the other hand targets \"embarrassingly parallel problems\" (EPP) with little or no effort is required to separate the problem into a number of parallel tasks.\n* In a cloud several applications (or, copies of the same application) run on several nodes. We call this **horizontal scalability**.\n\n\n\n\n* HPC systems are generally constructed:\n  * from many individual computers\n  * similar in capability to many personal computers\n  * connected together by some type of network\n  \n* HPC systems often include several different types of nodes:\n  * Master(or front-end or login) nodes\n  * Compute nodes \n  \n\n\n\n\n::: {.cell}\n::: {.cell-output-display}\n![HPC cluster Schematic](img/hpc_system_diagram.png){width=80% height=70%}\n:::\n:::\n\n\n\n## Nodes\n\nEach node on an HPC system is essentially an individual computer\n\n\n::: {.cell}\n::: {.cell-output-display}\n![HPC Nodes Schematic](img/node_diagram.png){width=80% height=60%}\n:::\n:::\n\n\n\n\n\n\n\n## Scheduler\n\n* To manage the sharing of the compute nodes among all of the jobs, HPC systems use a batch system(scheduler).\n* The batch system usually has commands for:\n  * submitting jobs\n  * inquiring about their status\n  * and modifying them\n* a typical HPC workflow could look something like this:\n  1. Transfer input datasets to the HPC system (via the master nodes)\n  2. Create a job submission script to perform your computation (on Master nodes)\n  3. Submit your job submission script to the scheduler (on Master nodes)\n  4. Scheduler runs your computation (on the compute nodes)\n  5. Analyse results from your computation (on the login or compute nodes)\n\n\n## Storage and File Systems\n\n* HPC systems often involves very large files, and/or many of them.\n* HPC systems have specialized file systems that are designed to meet different needs.\n* most HPC systems often have several different file systems available\n\n\n## Connecting to the HPC system\n\n### Workflow\n\nThe workflow for using HPC typically consists of the following steps:\n\n1. Login to HPC login/head node.\n2. Organize workspace.\n3. Transfer data and files.\n4. Install/run software on HPC.\n5. Test your job interactively on a compute node.\n6. Submit your job to the batch processor, to run it remotely on a compute node.\n7. Monitor your job and check your results when it has completed.\n\n## Connecting to the HPC system ...\n\n### Logging onto HPC\n\n* Connecting to an HPC system is most often done through a tool known as \"SSH\" (Secure SHell) \n* To begin using an HPC system we need to begin by opening a terminal.\n* SSH allows us to connect to Linux computers remotely, and use them as if they were our own.\n* Letâ€™s attempt to connect to the HPC system now:  \n\n\n::: {.cell}\n\n```{.bash .cell-code}\n      ssh yourUsername@hpc.ethernet.edu.et\n```\n:::\n\n\n\n## Connecting to the HPC system ...\n### Examining the nodes\n\n* Now we can log into the Ethernet HPC system we will look at the nodes. \n* There are at least two types of node on the system: **login nodes** and **compute nodes**.\n* We can use the `lscpu` command to print information on the processors on the login nodes to the terminal:\n\n\n::: {.cell}\n\n```{.bash .cell-code}\n   [remote]$ lscpu\n```\n:::\n\n* us the total amount of memory available so we use the ``head -1`` command:\n\n\n::: {.cell}\n\n```{.bash .cell-code}\n      [remote]$ head -1 /proc/meminfo\n      \n```\n:::\n\n* The ``qsub`` command is used to submit a job to the scheduler.\n\n\n## Accessing Software\n\n* Multiple versions of software are available on HPC systems\n* The three biggest factors to have multiple versions of software are :\n  - software incompatibilities;\n  - versioning;\n  - dependencies.\n* Environment modules are the solution to these problems.\n* A module is a self-contained description of a software package\n* There are a number of different environment module implementations commonly used on HPC systems: the two most common are **TCL** modules(Tmod) and  **Lmod**.\n* One major difference between the two tools is that Lmod is written in Lua and not TCL.\n* Lmod: An Environment Module System based on Lua, Reads TCL Modules, Supports a Software Hierarchy\n* Lmod has to translate [TCL](https://www.tcl.tk/) into [Lua](https://www.lua.org/)\n\n\n## Accessing Software ...\n\n* You can use the **module list** command to see which modules you currently have loaded in your environment.\n* If you have no modules loaded, you will see a message telling you so\n\n\n::: {.cell}\n\n```{.bash .cell-code}\n[remote]$ module list\n```\n:::\n\n::: {.cell}\n\n```{.bash .cell-code}\n    No Modulefiles Currently Loaded.\n```\n:::\n\n\n* To see available modules, use `module avail`\n\n\n::: {.cell}\n\n```{.bash .cell-code}\n[remote]$ module avail\n```\n:::\n\n\n* To load a software module, use `module load`. Hence We can load the `openmpi-x86_64 ` command with `module load`:\n\n\n::: {.cell}\n\n```{.bash .cell-code}\n[remote]$ module load openmpi-x86_64\n[remote]$ which openmpi-x86_64\n```\n:::\n\n\n\n## Transferring files\n### Grabbing files from the internet\n\n*  the easiest tool to download files from the internet is `wget`.\n* The syntax is relatively straightforward: \n\n\n::: {.cell}\n\n```{.bash .cell-code}\n   [remote]$ wget https://mesfind.github.io/hpc/files/cfd.tar.gz\n```\n:::\n\n\n\n\n### Transferring  with scp\n\n* To copy a single file to or from the remote system, we can use `scp`.\n\n\n::: {.cell}\n\n```{.bash .cell-code}\n[local]$ scp local-file.txt yourUsername@remote.computer.address:\n```\n:::\n\n\n* To transfer *to* another computer:\n\n\n::: {.cell}\n\n```{.bash .cell-code}\n[local]$ scp file.txt yourUsername@remote.computer.address: path\n```\n:::\n\n\n###  How to Connect to SFTP\n\n* `sftp` is an interactive way of downloading and uploading files.\n* Let's connect to a remote system using `sftp`\n\n\n::: {.cell}\n\n```{.bash .cell-code}\n  [local]$ sftp yourUsername@ethernet.edu.et\n  \n```\n:::\n\n\n\n### Getting Help\n\n* We can see which commands are available with `?` or `help`:\n\n\n::: {.cell}\n\n```{.bash .cell-code}\n    sftp> ?\n```\n:::\n\n::: {.cell}\n\n```{.bash .cell-code}\nsftp> help\n```\n:::\n\n\n\n### Check Present Working Directory\n\n* To show our remote working directory:\n\n\n::: {.cell}\n\n```{.bash .cell-code}\n   sftp> pwd\n```\n:::\n\n\n* To show our local working directory, we add an `l` in front of the command:\n\n\n::: {.cell}\n\n```{.bash .cell-code}\n    sftp> lpwd\n```\n:::\n\n\n\n### Listing Files\n\n* Listing files and directories in local as well as remote system.\n\n\n::: {.cell}\n\n```{.bash .cell-code}\n   sftp> ls\n```\n:::\n\n\n* * Listing files and directories in local as well on local system.\n\n\n::: {.cell}\n\n```{.bash .cell-code}\n    sftp> lls\n```\n:::\n\n\n\n###  Upload a File\n\n\n* we can put single or multiple files in remote system.\n* To upload a file, we type `put some-file.txt`\n\n\n::: {.cell}\n\n```{.bash .cell-code}\n    sftp> put input.dat\n```\n:::\n\n\n\n\n### Upload multiple Files\n\n\n::: {.cell}\n\n```{.bash .cell-code}\n    sftp> mput *.c\n```\n:::\n\n\n\n\n### Download File\n\n\n* To download a file we type `get some-file.txt`:\n\n\n::: {.cell}\n\n```{.bash .cell-code}\n    sftp> get input.dat\n```\n:::\n\n\n\n\n### Download multiple Files\n\n* Get multiple files on a local system\n\n\n::: {.cell}\n\n```{.bash .cell-code}\n    sftp> mget input.dat\n```\n:::\n\n\n\n\n### Switching Directories\n\n* Switching from one directory to another directory in local and remote locations.\n\n* on a remote system\n\n\n::: {.cell}\n\n```{.bash .cell-code}\n    sftp> cd test\n```\n:::\n\n\n* on a local system\n\n\n::: {.cell}\n\n```{.bash .cell-code}\n    sftp> lcd Desktop\n```\n:::\n\n\n\n### Create Directories\n\n*  Creating new directories on local and remote locations.\n\n\n::: {.cell}\n\n```{.bash .cell-code}\n    sftp> mkdir test\n```\n:::\n\n::: {.cell}\n\n```{.bash .cell-code}\n    sftp> lmkdir openmpi\n```\n:::\n\n\n\n\n* The most basic use of the scheduler is to run a command non-interactively. \n* This is also referred to as batch job submission. I\n* In this case, a job is just a shell script. Letâ€™s create a demo shell script to run as a test.\n\n\n\n::: {.cell}\n\n```{.bash .cell-code}\n#!/bin/bash\n# Save with example_job.sh\necho 'This script is running on:'\nhostname\nsleep 120\n```\n:::\n\n\n* To submit this job to the scheduler, we use the sbatch command.\n\n\n::: {.cell}\n\n```{.bash .cell-code}\nsbatch example_job.sh\n```\n:::\n\n\n\n\n* To check on our jobâ€™s status, we check the queue using the command\n\n\n\n::: {.cell}\n\n```{.bash .cell-code}\nsbatch example_job.sh\n```\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}